ligne de commande pour lancer le prog: ./philo
										number_philosopher 
										time_to_die 
										time_to_eat 
										time_to_sleep 
										[number_of_time_each_philosophers_must_eat]  arguments in square brackets are not required
										(number_of_time_each_philosophers_must_eat)

adress sanitanizer!!



   main                                     main.c	check arg numbers
    |->var init                             init.c
	    |->pthread_mutex_init               pthread	initiating the mutexes
	|->philo init							init.c
		|->timestamp						utils.c	timestamp fo start

while (num_of_philo)
        |->pthread_mutex_init				pthread fork_l initialised
if (not last philo)
				|->fork_r = fork_l [+ 1]
if (last philo)
				|->fork_r = fork_l [0]
		|->phtread_mutex_create(philo_life)                 
					|->philo_life      		philo.c
if (philo id is pair)
        |->ft_usleep(time_to_eat)			utils.c
if (philo id is not pair)
    	-
while(is_dead = false)				         
	|->is_dead(0)         					utils.c   
		|->pthread_mutex_lock(info->dead)	pthread	always return 0 in this case
		|->pthread_mutex_unlock(info->dead)	pthread
	|->pthread_create(check_death)			pthread
	            	|->ft_usleep(ttd + 1)	utils.c
					|->pthread mutexes lock	pthread
					|-> if is dead(1)		utils.c
							|-mut un dead	pthread
					|->else


used:
pthread_mutex_init, malloc, free, printf,

autorised:
memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock